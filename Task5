
#Write a program to check if a given number is positive, negative, or zero. 

def check_number(n):
    if n > 0:
        return "Positive"
    elif n < 0:
        return "Negative"
    else:
        return "Zero"

# Example usage
num = float(input("Enter a number: "))
print(check_number(num))

#Time Complexity: O(1)

#ii.Determine if a number is odd or even. 

def check_odd_even(n):
    if n % 2 == 0:
        return "Even"
    else:
        return "Odd"

# Example usage
num = int(input("Enter a number: "))
print(check_odd_even(num))

T.C: O(1)

#iii.Check if a person is eligible to vote (age >= 18).

def check_voting_eligibility(age):
    if age >= 18:
        return "Eligible to vote"
    else:
        return "Not eligible to vote"

# Example usage
age = int(input("Enter your age: "))
print(check_voting_eligibility(age))

#T.C: O(1) (CONSTANT TIME)


#iv.Write a program to find the greatest of two numbers.

def find_greatest(a, b):
    if a > b:
        return f"The greatest number is {a}"
    elif a < b:
        return f"The greatest number is {b}"
    else:
        return "Both numbers are equal"

# Example usage
num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))

print(find_greatest(num1, num2))

#T.C: O(1) 

#v.Print "Pass" if a student scores more than 40 marks; otherwise, print "Fail."

def check_pass_fail(marks):
    if marks > 40:
        return "Pass"
    else:
        return "Fail"

# Example usage
marks = float(input("Enter your marks: "))
print(check_pass_fail(marks))
 
#T.C: O(1)

#vi.Write a program to display the day of the week based on a number input (1 for Monday, 2 for Tuesday, etc.). 

def get_day_of_week(number):
    days = {
        1: "Monday",
        2: "Tuesday",
        3: "Wednesday",
        4: "Thursday",
        5: "Friday",
        6: "Saturday",
        7: "Sunday"
    }
    return days.get(number, "Invalid input! Please enter a number between 1 and 7.")

# Example usage
num = int(input("Enter a number (1-7): "))
print(get_day_of_week(num))

#T.C: Dictionary lookup (days.get(number)) takes O(1) time.

#vii.Implement a simple calculator to perform addition, subtraction, multiplication, and division. 

def calculator(num1, num2, operator):
    if operator == '+':
        return num1 + num2
    elif operator == '-':
        return num1 - num2
    elif operator == '*':
        return num1 * num2
    elif operator == '/':
        if num2 == 0:
            return "Error! Division by zero."
        return num1 / num2
    else:
        return "Invalid operator! Please use +, -, *, or /."

# Example usage
num1 = float(input("Enter first number: "))
operator = input("Enter an operator (+, -, *, /): ")
num2 = float(input("Enter second number: "))

print("Result:", calculator(num1, num2, operator))

#T.C:
#Each arithmetic operation (+, -, *, /) takes O(1) time.
#The if-elif-else conditions also run in O(1) time.

#viii.Write a program to display the name of a month based on the month number (1 for January, 2 for February, etc.).

def get_month_name(month_number):
    months = {
        1: "January", 2: "February", 3: "March", 4: "April",
        5: "May", 6: "June", 7: "July", 8: "August",
        9: "September", 10: "October", 11: "November", 12: "December"
    }
    return months.get(month_number, "Invalid input! Please enter a number between 1 and 12.")

# Example usage
num = int(input("Enter a month number (1-12): "))
print(get_month_name(num))

#T.C:Dictionary lookup (months.get(month_number)) takes O(1)  

 
#i.Write a program to find the greatest of three numbers. Check if a year is a leap year.

def find_greatest(a, b, c):
    if a >= b and a >= c:
        return f"The greatest number is {a}"
    elif b >= a and b >= c:
        return f"The greatest number is {b}"
    else:
        return f"The greatest number is {c}"

# Example usage
num1 = float(input("Enter first number: "))
num2 = float(input("Enter second number: "))
num3 = float(input("Enter third number: "))

print(find_greatest(num1, num2, num3))

T.C: O(1) 

#ii.Write a program to classify a character entered by the user as a vowel, consonant, or neither.

def classify_character(char):
    vowels = "AEIOUaeiou"
    
    if char.isalpha():  # Check if it's a letter
        if char in vowels:
            return "Vowel"
        else:
            return "Consonant"
    else:
        return "Neither (not an alphabet character)"

# Example usage
char = input("Enter a single character: ")

if len(char) == 1:  # Ensure only one character is entered
    print(classify_character(char))
else:
    print("Invalid input! Please enter only a single character.")

#T.C: O(1)

"""
iii.Calculate the grade of a student based on the marks they 
    score: 
    1.  90-100  : Grade A 
    2.  80-89  : Grade B 
    3.  70-79  : Grade C 
    4.  <70  : Fail. 
"""
def calculate_grade(marks):
    if 90 <= marks <= 100:
        return "Grade A"
    elif 80 <= marks < 90:
        return "Grade B"
    elif 70 <= marks < 80:
        return "Grade C"
    else:
        return "Fail"

# Example usage
marks = float(input("Enter your marks: "))

if 0 <= marks <= 100:
    print("Your grade:", calculate_grade(marks))
else:
    print("Invalid input! Marks should be between 0 and 100.")

#T.C: O(1)


#iv.Write a program to check if three sides length form a valid triangle.

def is_valid_triangle(a, b, c):
    # Triangle Inequality Theorem: Sum of any two sides must be greater than the third side
    if (a + b > c) and (a + c > b) and (b + c > a):
        return "The given sides form a valid triangle."
    else:
        return "The given sides do NOT form a valid triangle."

# Example usage
side1 = float(input("Enter first side: "))
side2 = float(input("Enter second side: "))
side3 = float(input("Enter third side: "))

print(is_valid_triangle(side1, side2, side3))

#T.C: O(1)

#i.Print all even numbers between 1 and 50 using a  while loop. 

num = 2  # Start from the first even number

while num <= 50:
    print(num, end=" ")  # Print numbers in a single line
    num += 2  # Increment by 2 to get the next even number

#T.C: O(n)

#ii.Write a program to display the multiplication table of a given number. First 20

def multiplication_table(num):
    for i in range(1, 21):  # Loop from 1 to 20
        print(f"{num} × {i} = {num * i}")

# Example usage
num = int(input("Enter a number: "))
multiplication_table(num)

#T.C: O(1)

#iii.Reverse a number using a  while  loop. Also can we get the sum of all the digits.

def reverse_and_sum(number):
    reverse_num = 0
    digit_sum = 0
    
    while number > 0:
        digit = number % 10  # Extract the last digit
        reverse_num = (reverse_num * 10) + digit  # Build the reversed number
        digit_sum += digit  # Add the digit to the sum
        number //= 10  # Remove the last digit from the number
    
    return reverse_num, digit_sum

# Example usage
num = int(input("Enter a number: "))

reversed_number, digit_sum = reverse_and_sum(num)
print(f"Reversed Number: {reversed_number}")
print(f"Sum of Digits: {digit_sum}")

#T.C: O(d)--->d is no.of digits


#iv.Write a program to count the number of digits in a given number using a  while  loop. 

def count_digits(number):
    count = 0
    
    if number == 0:  # Special case for 0
        return 1
    
    while number > 0:
        number //= 10  # Remove the last digit
        count += 1  # Increase the count
    
    return count

# Example usage
num = int(input("Enter a number: "))
print(f"Number of digits: {count_digits(abs(num))}")  # Use abs() to handle negative numbers

#T.C: O(d)


#v.Write a program that keeps asking the user to enter numbers until they enter a negative number. Use a  while  loop. 

while True:
    num = float(input("Enter a number (enter a negative number to stop): "))
    if num < 0:
        print("Negative number entered. Exiting the program.")
        break  # Stop the loop if the number is negative
    print(f"You entered: {num}")

#T.C: O(n)--->no.of iterations depend on user input


#i.Print the first 10 terms of the Fibonacci series using a  for loop.

# Number of terms to print
n = 10  
a, b = 0, 1  # First two Fibonacci numbers

print("Fibonacci Series:")
for _ in range(n):
    print(a, end=" ")  # Print the current term
    a, b = b, a + b  # Update the values

#T.c: O(1)   


#ii.Check if a given number is a prime number using a  for loop.

def is_prime(n):
    if n < 2:
        return f"{n} is NOT a prime number."

    for i in range(2, int(n ** 0.5) + 1):  # Check divisibility from 2 to sqrt(n)
        if n % i == 0:
            return f"{n} is NOT a prime number."
    
    return f"{n} is a prime number."

# Example usage
num = int(input("Enter a number: "))
print(is_prime(num))


#T.C: The loop runs up to O(√n) times.
#     Overall Time Complexity: O(√n) (sublinear time).
#    This is much more efficient than checking all numbers up to n (which would be O(n)).


#iii.Write a program to calculate the factorial of a number using a  while  loop. 

def factorial(n):
    if n < 0:
        return "Factorial is not defined for negative numbers."
    
    fact = 1
    while n > 0:
        fact *= n  # Multiply fact by current number
        n -= 1  # Decrease the number
    
    return fact

# Example usage
num = int(input("Enter a number: "))
print(f"Factorial of {num} is {factorial(num)}")

#T.C: O(n)

#iv.Print all numbers from 1 to 100 that are divisible by 3 and 5 using a  for  loop.

print("Numbers divisible by 3 and 5 between 1 and 100:")

for num in range(1, 101):  # Loop from 1 to 100
    if num % 3 == 0 and num % 5 == 0:  # Check divisibility by both 3 and 5
        print(num, end=" ")

#T.C: O(n)
 
 
#v.Implement a menu-driven program where the user can choose to: 
#1.  Find the square of a number. 
#2.  Find the cube of a number. 
#3.  Exit.

while True:
    print("\nMenu:")
    print("1. Find the square of a number")
    print("2. Find the cube of a number")
    print("3. Exit")
    
    choice = int(input("Enter your choice (1-3): "))

    if choice == 1:
        num = float(input("Enter a number: "))
        print(f"Square of {num} is {num ** 2}")
    elif choice == 2:
        num = float(input("Enter a number: "))
        print(f"Cube of {num} is {num ** 3}")
    elif choice == 3:
        print("Exiting the program. Goodbye!")
        break  # Exit the loop
    else:
        print("Invalid choice! Please enter 1, 2, or 3.")

#T.C: O(n)


#v.Implement a basic login system where the user has three attempts to enter the correct password using a loop. 

# Set the correct password
correct_password = "secure123"  
attempts = 3  # Maximum attempts allowed

while attempts > 0:
    user_input = input("Enter your password: ")
    
    if user_input == correct_password:
        print("Login successful! Welcome!")
        break  # Exit the loop when the password is correct
    else:
        attempts -= 1
        if attempts > 0:
            print(f"Incorrect password! You have {attempts} attempts left.")
        else:
            print("Too many incorrect attempts. Access denied.")

#T.C: 
#The loop runs at most O(3) = O(1) times (constant time).
#Each iteration performs an O(1) string comparison.
#Overall Complexity: O(1) (constant time).
